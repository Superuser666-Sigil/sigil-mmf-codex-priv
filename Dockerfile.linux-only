# 🐳 Linux-Only Dockerfile for MMF Sigil
# Optimized for minimal dependencies and maximum security

# Build stage with Rust toolchain
FROM rust:1.75-slim as builder

# Install build dependencies
RUN apt-get update && apt-get install -y \
    pkg-config \
    libssl-dev \
    && rm -rf /var/lib/apt/lists/*

# Set working directory
WORKDIR /app

# Copy dependency files first for better caching
COPY Cargo.toml Cargo.lock ./

# Create a dummy main.rs to build dependencies
RUN mkdir src && echo "fn main() {}" > src/main.rs

# Build dependencies only (this layer will be cached)
RUN cargo build --release --target x86_64-unknown-linux-gnu

# Remove dummy main.rs and copy actual source code
RUN rm src/main.rs
COPY src/ ./src/

# Build the actual application
RUN cargo build --release --target x86_64-unknown-linux-gnu

# Runtime stage - minimal Debian image
FROM debian:bookworm-slim

# Install runtime dependencies only
RUN apt-get update && apt-get install -y \
    ca-certificates \
    libssl3 \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Create non-root user for security
RUN groupadd -r sigil && useradd -r -g sigil sigil

# Set working directory
WORKDIR /app

# Copy binary from builder stage
COPY --from=builder /app/target/x86_64-unknown-linux-gnu/release/mmf_sigil /usr/local/bin/

# Create necessary directories with proper permissions
RUN mkdir -p /app/data /app/logs /app/config \
    && chown -R sigil:sigil /app \
    && chmod +x /usr/local/bin/mmf_sigil

# Switch to non-root user
USER sigil

# Expose default port (adjust as needed)
EXPOSE 8080

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8080/health || exit 1

# Default command
CMD ["mmf_sigil"]

# Labels for better container management
LABEL maintainer="MMF Sigil Team"
LABEL description="MMF Sigil - Linux-only deployment"
LABEL version="0.1.0"
LABEL org.opencontainers.image.source="https://github.com/Superuser666-Sigil/sigil-mmf-codex-priv"
