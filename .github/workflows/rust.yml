name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: "0 6 * * 1" # Monday 06:00 UTC weekly extended run
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: full

jobs:
  build-test:
    name: Build, Test, Lint
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        toolchain: [stable]
    steps:
      - uses: actions/checkout@v5

      - name: Install toolchain (${{ matrix.toolchain }})
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.toolchain }}
          components: clippy,rustfmt

      - name: Cache cargo
        uses: Swatinem/rust-cache@v2

      - name: Show versions
        run: |
          rustc -Vv
          cargo -V

      - name: Build (debug)
        run: cargo build --all-features

      - name: Build (release)
        run: cargo build --release --all-features

      - name: Test (debug)
        run: cargo test --all-features

      - name: Clippy (deny warnings)
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Format (check)
        run: cargo fmt --all -- --check

      - name: Docs (deny warnings)
        env:
          RUSTDOCFLAGS: -D warnings
        run: cargo doc --workspace --no-deps

      - name: Cargo Audit
        if: matrix.os == 'ubuntu-latest'
        uses: rustsec/audit-check@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install cargo-deny
        if: matrix.os == 'ubuntu-latest'
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-deny

      - name: Cargo Deny (advisories, bans, licenses, sources, duplicates)
        if: matrix.os == 'ubuntu-latest'
        run: cargo deny check advisories bans licenses sources duplicates

  extended:
    name: Extended Checks (weekly/update window)
    if: github.event_name == 'schedule' || startsWith(github.head_ref, 'chore/dep-update/')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: Install nightly (for minimal-versions experiment)
        uses: dtolnay/rust-toolchain@nightly

      - name: Cache cargo
        uses: Swatinem/rust-cache@v2

      - name: Minimal versions resolution
        run: |
          cargo update -Z minimal-versions
          cargo build

      - name: Install tools (sbom, outdated)
        uses: taiki-e/install-action@v2
        with:
          tool: |
            cargo-outdated
            cyclonedx-bom

      - name: Outdated report
        run: cargo outdated -R --root-deps-only

      - name: Generate SBOM (CycloneDX)
        run: cyclonedx-bom --format json --output sbom.cdx.json

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: sigilderg-artifacts
          path: |
            target/doc
            sbom.cdx.json
            Cargo.lock
